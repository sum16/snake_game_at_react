{"version":3,"sources":["components/Button.jsx","components/Field.jsx","components/ManipulationPanel.jsx","components/Navigation.jsx","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","status","onStart","onRestart","onStop","className","onClick","Field","fields","map","row","column","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","down","right","left","OppositeDirection","Delta","DirectionKeyCodeMap","37","38","39","40","unsubscribe","timer","clearInterval","App","useState","setFields","setPosition","tick","setTick","setStatus","direction","setDirection","body","setBody","setDifficulty","useEffect","setInterval","handleMoving","console","log","delta","JSON","stringify","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c03eb53.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Button = ({ status, onStart, onRestart, onStop}) => {\n  return (\n    <div className=\"button\">\n      { status === \"gameover\" && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button> }\n      { status === \"init\" && <button className=\"btn btn-init\" onClick={onStart}>start</button> }\n      { status === \"suspended\" && <button className=\"btn btn-suspended\" onClick={onStart}>start</button> }\n      { status === \"playing\" && <button className=\"btn btn-playing\" onClick={onStop}>stop</button> }\n  </div>\n  )\n}","import React from \"react\";\n\nexport const Field = ({ fields }) => {\n  return (\n    <div className=\"field\">\n      {\n        fields.map((row) => {\n          return row.map((column) => {\n            // console.log(row);\n            return <div className={`dots ${column}`}></div>\n          })\n        })\n      }\n    </div>\n  )\n}\n\n// Array.fill()は、配列の全要素に同じ値を設定する関数です。 以下の例では、3個の数値配列を生成して値 0 で初期化しています。\n\n//const arr = Array(3).fill(0)","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight\n} from '@fortawesome/free-solid-svg-icons'\n\nexport const ManipulationPanel = ({onChange}) => {\n  const onUp = () => onChange('up')\n  const onRight = () => onChange('right')\n  const onLeft = () => onChange('left')\n  const onDown = () => onChange('down')\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n      <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n        <FontAwesomeIcon icon={faArrowUp} />\n      </button>\n      <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n        <FontAwesomeIcon icon={faArrowDown} />\n      </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n          <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};","import React from \"react\";\n\nexport const Navigation = ({length, difficulty = 3, onChangeDifficulty}) => {\n  // 難易度が 1 以下と5 以上の場合はis-hiddenをつけて矢印を非表示にする\n  const upVisibility = difficulty < 5 ? '' : 'is-hidden'\n  const downVisibility = difficulty > 1 ? '' : 'is-hidden'\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n  const onDownDifficulty = () => onChangeDifficulty(difficulty -1)\n  return (\n  <div className=\"navigation\">\n      <div className=\"navigation-item\">\n          <span className=\"navigation-label\">Length: </span>\n          <div className=\"navigation-item-number-container\">\n            <div className=\"num-board\">{length}</div>\n          </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n          <div\n            className={`difficulty-button difficulty-up ${upVisibility}`}\n            onClick={onUpDifficulty}\n            >\n          </div>\n          <div\n            className={`difficulty-button difficulty-down ${downVisibility}`}\n            onClick={onDownDifficulty}\n          >\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","// ランダムに表示されるエサがスネークの位置とかぶるのを排除\nexport const getFoodPosition = (fieldSize, excludes) => {  //excludes 0: { x:17 y: 17 }\n  // 壁が34のため-1 & エサの出現可能エリアは一番外側から一個内側にしたいためさらに-1\n  // 最小値を 1 としたいので最後に+1  これで1~32のレンジ\n  while(true) {\n    const x = Math.floor(Math.random() * (fieldSize -1 -1)) + 1\n    const y = Math.floor(Math.random() * (fieldSize -1 -1)) + 1\n    const conflict = excludes.some(item=> item.x === x && item.y === y)\n\n    if(!conflict) {\n      return {x, y};\n    } \n  }\n}\n\nexport const initFields = (fieldSize, snake) => {\n  // console.log(fieldSize); →35\n  const fields = []\n  for(let i=0; i <= fieldSize; i++) {\n    const cols = new Array(fieldSize).fill('')\n    fields.push(cols)\n  }\n  fields[snake.y][snake.x] = 'snake'// へび\n  const food = getFoodPosition(fieldSize, [snake])\n  // console.log(JSON.stringify(food));  例 {\"x\":32,\"y\":28}\n  fields[food.y][food.x] = 'food' //えさ\n  return fields\n}\n\n// some 関数はコールバックが一つでも true を返したら true を返す関数\n// 排除リストの中に同じ座標が含まれている場合はconflictが true になりそのまま while ループの先頭に戻って再度ランダムな座標を取得する","import { useCallback, useEffect, useState } from 'react';\nimport { Button } from './components/Button';\nimport { Field } from './components/Field';\nimport { ManipulationPanel } from './components/ManipulationPanel';\nimport { Navigation } from './components/Navigation';\nimport { initFields, getFoodPosition } from './utils'\n\n// デフォルトの座標を指定\nconst initialPosition = {x: 17, y:17}\n// 35 * 35のdivを生成する\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval = 300\nconst defaultDifficulty = 3\nconst Difficulty = [1000, 500, 100, 50, 10]\n\n\n\n// ゲームの状態のステータスを定義　freezeメソッドで書き変わらないようにする\nconst GameStatus = Object.freeze({\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n})\n\n\nconst Direction = Object.freeze({\n  up: \"up\",\n  down: \"down\",\n  right: \"right\",\n  left: \"lect\"\n});\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  down: { x: 0, y: 1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 }\n});\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\nlet timer = undefined // timerは関数\n\nconst unsubscribe = (timer) => {\n  if (!timer) {   // timerがundifindだったらreturn\n    return\n  }\n  clearInterval(timer) //タイマーを削除\n}\n\n// ①xかyの値がマイナスでなく、②フィールドサイズより小さい座標に収まっていない場合はぶつかっていると判断してtrueを返すisCollision関数を定義\nconst isCollision = (fieldSize, position) => {\n  // x,y 座標のどちらかが 0 より小さくなってしまっていることをチェック\n  if (position.y < 0 || position.x < 0)  {\n    return true;\n  }\n  // x,y 座標がフィールドより大きくなってしまった場合をチェック / fieldSize - 1 としているのは座標データが 0 始まりなので壁は-1とする\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n  return false;\n};\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake'\n}\n\nfunction App() {\n  // initFieldsで生成したフィールドのデータ（二次元配列）を初期値に設定\n  const [fields, setFields] = useState(initialValues);\n  const [position, setPosition] = useState(); //初期値はいれていないため最初のレンダリングでnullになることに注意 //フィールドの位置\n  const [tick, setTick] = useState(0); // 特定の間隔ごとにpositionがundefinedのまま実行されてしまうのを回避する\n  // tickは一定時間ごとにインクリメントされるが、ここのインクリメントされる値自体はあまり問題でなく、一定間隔でレンダリングがトリガーされるということが重要\n  // useEffectの初回しかレンダリングできない問題を、tickのインクリメントが更新でのレンダリングによって解決している →100ミリ秒(defaultIntervalの値）ごとにレンダリングされる\n  const [status, setStatus]= useState(GameStatus.init);\n  // 進行方向をステートで管理\n  const [direction, setDirection] = useState(Direction.up);\n  const [body, setBody] = useState([]) //蛇が伸びる処理\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n\n\n  useEffect(() => {\n    setBody([initialPosition])\n    // テスト用\n    // setBody(\n    //   new Array(15).fill('').map((_item, index) => ({ x: 17, y: 17 + index })),\n    // )\n    // ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty -1]\n    timer = setInterval(() => {\n      setTick(tick => tick + 1);\n    }, interval)\n    return unsubscribe // コンポーネントが削除されるタイミングで関数を呼ぶ\n  }, [difficulty])\n\n  // tickの更新によるレンダリングごとに関数（進む機能）を実行している →100ミリ秒(defaultIntervalの値）ごとにレンダリングされる → ゲームの中の時間が進むたびに関数が呼ばれる\n  useEffect(() => {\n    // 進行を止める\n    if (body.length === 0 || status !== GameStatus.playing) { // 初回のレンダリングでpositionがundifineになるため事前にnullチェックをする/ 画面を読み込んでもスネークは動かないようする\n      return\n    }\n    // 進行する\n    const canContinue = handleMoving()\n    if (!canContinue) {\n      unsubscribe()\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick])\n\n\n  // スタートボタンを押した時にステータスを\"playing\"にする\n  const onStart = () => {\n    setStatus(GameStatus.playing)\n    console.log(status);\n  }\n\n  const onStop = () => {\n    setStatus(GameStatus.suspended)\n  }\n\n  // 進行方向を変更する関数\n  const handleMoving = () => {\n    const { x, y } = body[0]  // オブジェクトの分割代入 positionには{x:17, y:17}、xとyには17,17が入っている\n    console.log(body);\n    // const nextY = Math.max(y-1, 0) // y座標をデクリメント（1 ずつ減算）していくことでまっすぐ上にスネークが移動していく動きを実現\n    const delta = Delta[direction]\n    console.log(JSON.stringify(delta)); // {\"x\":0,\"y\":-1}などが入る\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    // 壁にぶつかってしまった場合  自分を食べてしまった場合\n    if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n      return false\n    }\n    // エサを食べない場合 → body の末尾を消す\n    const newBody = [...body]\n    console.log(newBody);\n    if (fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack = newBody.pop();\n      fields[removingTrack.y][removingTrack.x] = ''\n    } else {\n      // 餌が食べられた場合\n      const food = getFoodPosition(fields.length, [...newBody], newPosition)      \n      fields[food.y][food.x] = 'food'\n    }\n    // エサを食べる場合 → body の末尾を消さない（消さないので伸びる)\n    fields[newPosition.y][newPosition.x] = 'snake'\n    newBody.unshift(newPosition)    \n    setBody(newBody)             //スネークの位置を更新  \n    setFields(fields)               // setFieldsでフィールドを更新\n    return true\n  }\n\n  // 進行方向を変更する関数  newDirectionには押された矢印のキーコードに対応する'up'やdownが入る\n  const onChangeDirection = useCallback((newDirection) => {\n    // ゲームプレイ中だけ方向が変えられる\n    if(status !== GameStatus.playing) {\n      return direction\n    }\n    // 押された矢印の方向が同じであれば処理を抜ける ゲームのルール上進行方向と真逆への移動は許容しない \n    // 例) directionがrightの場合、OppositeDirection[direction]にはleftが入り、新しい進行方向(newDirection)をleftにすると真逆の制約となるためreturn\n    if(OppositeDirection[direction] === newDirection) {\n      return\n    }\n    setDirection(newDirection);\n  }, [direction, status])\n\n  // 難易度を変更できるようにする関数\n  const onChangeDifficulty = useCallback((difficulty) => {\n    // 難易度は初期状態（ゲームを始める前）以外の時は変更できないようにする\n    if (status !== GameStatus.init) {\n      return;\n    }\n    // あたらしい難易度が難易度の範囲外の数の場合(5段階なので1~5以外の場合)も\n    if (difficulty < 1 || difficulty > Difficulty.length) {\n      return\n    }\n    setDifficulty(difficulty)\n  }, [status, difficulty])\n// 押された矢印のキーコードを取得し、キーコードのプロパティを取得('up'や'down'など) newDirectionには'up'や'down'などのstringが入る\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  },[onChangeDirection])\n  // 1 回目と 2 回目のイベントの内容はほぼ同じなのですが、イベントが登録された時の状態（ステータスや進行方向）が違うので再度登録し直す必要がある\n\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    setPosition(initialPosition)\n    setFields(initFields(35, initialPosition))\n  }\n\n  // console.log('進行方向', direction)\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n      <Field fields={fields} />\n      </main>\n\n      <footer className=\"footer\">\n        <Button status={status} onStart={onStart} onRestart={onRestart} onStop={onStop}/>\n        <ManipulationPanel onChange={onChangeDirection} />\n      </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n\n// Math.max関数は引数に複数の数値を指定すると、その中の最大値を返す\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}